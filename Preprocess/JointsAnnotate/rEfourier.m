function outln = rEfourier( rFSDs, iNoOfHarmonicsReconstruct,iNoOfPointsReconstruct)
% Reverse elliptical Fourier transform on the input Fourier series
% rFSDs generated by fEfourier.m. This reconstructs an approximation to the original outline figure
% using the specified number of harmonics and data points. See Kuhl FP and Giardina CR
% "Elliptic Fourier features of a closed contour" Computer Graphics and
% Image Processing 18:236-258 1982 for theory and details.

iStartHarmonic = 2; % start at 2  - No.1 is just an offset and is added in later (lines 17 & 27)
ReconnedOutline = 0;
% reconstruct the x-projection
for iTime = 1:iNoOfPointsReconstruct
    rSum = 0.0;
	for iHNo = iStartHarmonic:iNoOfHarmonicsReconstruct
       	rSum = rSum + (rFSDs(1,iHNo) * cos(2*(iHNo-1)*pi*iTime / iNoOfPointsReconstruct) + ...
            rFSDs(2,iHNo) * sin(2*(iHNo-1)*pi*iTime / iNoOfPointsReconstruct));
	end % for iHNo = 1 : iNoOfHarmonicsReconstruct
   	ReconnedOutline(iTime,1) = rFSDs(1,1) + rSum;
end % for iTime = 1 : iNoOfPointsReconstruct

% reconstruct the y-projection
for iTime = 1:iNoOfPointsReconstruct
    rSum = 0.0;
	for iHNo = iStartHarmonic:iNoOfHarmonicsReconstruct
   	      rSum = rSum + (rFSDs(3,iHNo) * cos(2*(iHNo-1)*pi*iTime / iNoOfPointsReconstruct) + ...
          	 rFSDs(4,iHNo) * sin(2*(iHNo-1)*pi*iTime / iNoOfPointsReconstruct));
	end % for iHNo = 1 : iNoOfHarmonicsReconstruct
   	ReconnedOutline(iTime,2) = rFSDs(3,1) + rSum;
end % for iTime = 1 : iNoOfPointsReconstruct
outln = ReconnedOutline;
